@startuml Diagrama de Classes
!theme plain
skinparam dpi 300
skinparam classFontSize 8
skinparam packageFontSize 10
skinparam classAttributeIconSize 0
skinparam minClassWidth 120
skinparam packageStyle rectangle
skinparam backgroundColor white
skinparam defaultTextAlignment center
skinparam wrapWidth 200
skinparam maxMessageSize 150
skinparam class {
    BackgroundColor white
    BorderColor black
    ArrowColor black
    FontSize 8
}
skinparam package {
    BackgroundColor #f0f0f0
    BorderColor black
    FontSize 10
}
skinparam enum {
    BackgroundColor #e8f4f8
    BorderColor black
    FontSize 8
}
left to right direction
scale 0.7

package "Core & Value Objects" {
    abstract class AggregateRoot<T> {
        #props: T
        #id: UniqueEntityID
    }
    
    abstract class Entity<T> {
        #props: T
        #id: UniqueEntityID
    }
    
    class UniqueEntityID {
        -value: string
        +equals(): boolean
    }
    
    class Money {
        -amount: number
        -currency: string
        +getAmount(): number
        +add(): Money
        +subtract(): Money
        +multiply(): Money
    }
    
    class Percentage {
        -value: number
        +getValue(): number
        +fromDecimal(): Percentage
    }
    
    class Quantity {
        -value: number
        +getValue(): number
        +add(): Quantity
        +isZero(): boolean
    }
}
package "Asset" {
    enum AssetType {
        Stock, ETF, FIIs
        Bond, Crypto
    }
    
    class Asset {
        -symbol: string
        -name: string
        -assetType: AssetType
        -sector: string
        -currency: string
        -isActive: boolean
        +desactive(): void
    }
}

package "Investor" {
    enum InvestorProfile {
        Conservative
        Moderate, Aggressive
    }
    
    class Investor {
        -email: Email
        -name: Name
        -cpf: CPF
        -riskProfile: InvestorProfile
        -isActive: boolean
        +updateName(): void
        +updateEmail(): void
    }
}

package "Portfolio" {
    class Portfolio {
        -investorId: UniqueEntityID
        -name: string
        -description: string
        -totalValue: TotalValue
        +increaseTotalValue(): void
        +decreaseTotalValue(): void
    }
    
    class Investment {
        -portfolioId: UniqueEntityID
        -assetId: UniqueEntityID
        -quantity: Quantity
        -currentPrice: Money
        -transactions: Transaction[]
        +getTotalInvested(): Money
        +getCurrentValue(): Money
        +getProfitLoss(): Money
        +addQuantity(): void
    }
    
    class InvestmentTransaction {
        +quantity: Quantity
        +price: Money
        +date: Date
        +transactionId: UniqueEntityID
    }
}

package "Transaction" {
    enum TransactionType {
        Buy, Sell, Dividend
    }
    
    class Transaction {
        -portfolioId: UniqueEntityID
        -assetId: UniqueEntityID
        -transactionType: TransactionType
        -quantity: Quantity
        -price: Money
        -totalAmount: Money
        -fees: Money
        -dateAt: Date
        +isBuyTransaction(): boolean
        +getTotalNetAmount(): Money
    }
}

package "Goal" {
    enum Priority {
        High, Medium, Low
    }
    
    enum Status {
        Active, Achieved, Cancelled
    }
    
    class Goal {
        -investorId: UniqueEntityID
        -name: string
        -targetAmount: Money
        -currentAmount: Money
        -targetDate: Date
        -priority: Priority
        -status: Status
        +progress: Percentage
        +addToCurrentAmount(): void
        +markAsAchieved(): void
    }
}

' Relationships
Asset ||--|| AssetType
Investor ||--|| InvestorProfile
Transaction ||--|| TransactionType
Goal ||--|| Priority
Goal ||--|| Status

Portfolio ||--o{ Investment
Investment ||--o{ InvestmentTransaction
Portfolio ||--o{ Transaction

Investor ||--o{ Portfolio
Investor ||--o{ Goal
Asset ||--o{ Investment
Asset ||--o{ Transaction

' Core inheritance
Asset --|> AggregateRoot
Portfolio --|> AggregateRoot
Investment --|> Entity
Transaction --|> Entity
Goal --|> Entity
Investor --|> Entity

' Value object usage
Investment *-- Money
Investment *-- Quantity
Transaction *-- Money
Transaction *-- Quantity
Goal *-- Money
Portfolio *-- Money

@enduml