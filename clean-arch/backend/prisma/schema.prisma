// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum AssetType {
  Stock
  ETF
  FIIs
  Bond
  Crypto
  Others
}

enum InvestorProfile {
  Conservative
  Moderate
  Aggressive
}

enum TransactionType {
  Buy
  Sell
  Dividend
}

enum Priority {
  High
  Medium
  Low
}

enum Status {
  Active
  Achieved
  Cancelled
}

// ================================
// MODELS
// ================================

model Asset {
  id        String    @id @default(uuid())
  symbol    String    @unique
  name      String
  assetType AssetType @map("asset_type")
  sector    String
  exchange  String
  currency  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  isActive  Boolean   @default(true) @map("is_active")

  // Relacionamentos
  investments  Investment[]
  transactions Transaction[]

  @@map("assets")
}

model Investor {
  id          String          @id @default(uuid())
  email       String          @unique
  name        String
  cpf         String          @unique
  password    String
  dateOfBirth DateTime        @map("date_of_birth")
  riskProfile InvestorProfile @map("risk_profile")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime?       @updatedAt @map("updated_at")
  isActive    Boolean         @default(true) @map("is_active")

  // Relacionamentos
  portfolios Portfolio[]
  goals      Goal[]

  @@map("investors")
}

model Portfolio {
  id          String    @id @default(uuid())
  investorId  String    @map("investor_id")
  name        String
  description String?
  totalValue  Decimal   @default(0) @map("total_value") @db.Decimal(15, 2)
  allocations String[]  @default([])
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  // Relacionamentos
  investor     Investor      @relation(fields: [investorId], references: [id], onDelete: Cascade)
  investments  Investment[]
  transactions Transaction[]

  @@map("portfolios")
}

model Investment {
  id           String    @id @default(uuid())
  portfolioId  String    @map("portfolio_id")
  assetId      String    @map("asset_id")
  quantity     Decimal   @db.Decimal(15, 8)
  currentPrice Decimal   @map("current_price") @db.Decimal(15, 2)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  // Relacionamentos
  portfolio              Portfolio               @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset                  Asset                   @relation(fields: [assetId], references: [id])
  investmentTransactions InvestmentTransaction[]
  investmentYields       InvestmentYield[]

  @@unique([portfolioId, assetId])
  @@map("investments")
}

model InvestmentTransaction {
  id            String   @id @default(uuid())
  investmentId  String   @map("investment_id")
  quantity      Decimal  @db.Decimal(15, 8)
  price         Decimal  @db.Decimal(15, 2)
  date          DateTime
  transactionId String   @map("transaction_id")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relacionamentos
  investment Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)

  @@map("investment_transactions")
}

model InvestmentYield {
  id           String   @id @default(uuid())
  investmentId String   @map("investment_id")
  yieldId      String   @map("yield_id")
  incomeValue  Decimal  @map("income_value") @db.Decimal(15, 2)
  date         DateTime
  createdAt    DateTime @default(now()) @map("created_at")

  // Relacionamentos
  investment Investment @relation(fields: [investmentId], references: [id], onDelete: Cascade)

  @@map("investment_yields")
}

model Transaction {
  id              String          @id @default(uuid())
  portfolioId     String          @map("portfolio_id")
  assetId         String          @map("asset_id")
  transactionType TransactionType @map("transaction_type")
  quantity        Decimal         @db.Decimal(15, 8)
  price           Decimal         @db.Decimal(15, 2)
  income          Decimal?        @db.Decimal(15, 2)
  totalAmount     Decimal         @map("total_amount") @db.Decimal(15, 2)
  fees            Decimal         @default(0) @db.Decimal(15, 2)
  dateAt          DateTime        @map("date_at")
  notes           String?
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime?       @updatedAt @map("updated_at")

  // Relacionamentos
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  asset     Asset     @relation(fields: [assetId], references: [id])

  @@map("transactions")
}

model Goal {
  id            String    @id @default(uuid())
  investorId    String    @map("investor_id")
  name          String
  description   String?
  targetAmount  Decimal   @map("target_amount") @db.Decimal(15, 2)
  currentAmount Decimal   @default(0) @map("current_amount") @db.Decimal(15, 2)
  currency      String    @default("BRL")
  targetDate    DateTime  @map("target_date")
  priority      Priority
  status        Status    @default(Active)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  // Relacionamentos
  investor Investor @relation(fields: [investorId], references: [id], onDelete: Cascade)

  @@map("goals")
}
